{"name":"Common.Serializer","tagline":"Provides a simple abstraction to switch between different serialization implementations","body":"# Common.Serializer\r\n\r\nProvides a simple serializer abstraction to switch between different serialization implementations.\r\n\r\n## Installation\r\n\r\nnuget package to come\r\n\r\n## Usage\r\n\r\nSetup the default adapter, usually early in your application :   \r\n```C#\r\nSerialization.Initialize(config =>\r\n{\r\n    config.DefaultAdapter = new DatacontractSerializerAdapter();\r\n});\r\n```\r\nUsing the default adapter (configured as above) :\r\n```C#\r\nstring serialized = Serialization.Serialize(new AClass { SomeText = \"SomeText\" });\r\nAClass deserialized = Serialization.Deserialize<AClass>(serialized);\r\n```\r\nExtension methods to by pass the default and use an adapter explicitely :\r\n```C#\r\nstring overrideResult = Serialization.With.Json().Serialize(new { SomeText = \"SomeText\" });\r\n```\r\n\r\n## ToDo\r\n\r\n- Is the configuration api good enough?\r\n- Implement stream apis on the adapters\r\n- Add more adapters\r\n- Setup CI\r\n\r\n## Contributing\r\n\r\n1. Fork it!\r\n2. Create your feature branch: `git checkout -b my-new-feature`\r\n3. Commit your changes: `git commit -am 'Add some feature'`\r\n4. Push to the branch: `git push origin my-new-feature`\r\n5. Submit a pull request :D\r\n\r\n## License\r\n\r\n[MIT](License.txt)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}